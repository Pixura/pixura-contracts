{
  "contractName": "ERC721Proxy",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        }
      ],
      "name": "addAuthorizedAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "authorities",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        }
      ],
      "name": "removeAuthorizedAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        },
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removeAuthorizedAddressAtIndex",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAuthorizedAddresses",
      "outputs": [
        {
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AuthorizedAddressAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AuthorizedAddressRemoved",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getProxyId",
      "outputs": [
        {
          "name": "",
          "type": "bytes4"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405260008054600160a060020a03191633179055610ba0806100256000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166342f1181e8114610229578063494503d41461024c57806370712939146102805780638da5cb5b146102a15780639ad26744146102b6578063ae25532e146102da578063b918161114610321578063d39de6e914610356578063f2fde38b146103bb575b3480156100a457600080fd5b507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19600035167fa85e59e4000000000000000000000000000000000000000000000000000000008114156102245760408051338152600160208201529081205415156101485760e560020a62461bcd0260005260e560020a6020527c1553454e4445525f4e4f545f415554484f52495a454400000000000000604052600060605260646000fd5b600160643503156101945760e560020a62461bcd0260005260e560020a6020527c0e494e56414c49445f414d4f554e540000000000000000000000000000604052600060605260646000fd5b7f23b872dd000000000000000000000000000000000000000000000000000000006000526040602460043760043560206048820160443760288101356000806064600080855af180156101e357005b60e560020a62461bcd0260005260e560020a6020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b600080fd5b34801561023557600080fd5b5061024a600160a060020a03600435166103dc565b005b34801561025857600080fd5b50610264600435610538565b60408051600160a060020a039092168252519081900360200190f35b34801561028c57600080fd5b5061024a600160a060020a0360043516610560565b3480156102ad57600080fd5b5061026461074c565b3480156102c257600080fd5b5061024a600160a060020a036004351660243561075b565b3480156102e657600080fd5b506102ef6109d5565b604080517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff199092168252519081900360200190f35b34801561032d57600080fd5b50610342600160a060020a0360043516610a0b565b604080519115158252519081900360200190f35b34801561036257600080fd5b5061036b610a20565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103a757818101518382015260200161038f565b505050509050019250505060405180910390f35b3480156103c757600080fd5b5061024a600160a060020a0360043516610a82565b600054600160a060020a0316331461042c576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610b55833981519152604482015290519081900360640190fd5b600160a060020a03811660009081526001602052604090205460ff161561049d576040805160e560020a62461bcd02815260206004820152601960248201527f5441524745545f414c52454144595f415554484f52495a454400000000000000604482015290519081900360640190fd5b600160a060020a0381166000818152600160208190526040808320805460ff19168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909101805473ffffffffffffffffffffffffffffffffffffffff191684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b600280548290811061054657fe5b600091825260209091200154600160a060020a0316905081565b60008054600160a060020a031633146105b1576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610b55833981519152604482015290519081900360640190fd5b600160a060020a03821660009081526001602052604090205460ff161515610623576040805160e560020a62461bcd02815260206004820152601560248201527f5441524745545f4e4f545f415554484f52495a45440000000000000000000000604482015290519081900360640190fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b6002548110156107125781600160a060020a031660028281548110151561066857fe5b600091825260209091200154600160a060020a0316141561070a5760028054600019810190811061069557fe5b60009182526020909120015460028054600160a060020a0390921691839081106106bb57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556002805460001901906107049082610b0d565b50610712565b600101610645565b6040513390600160a060020a038416907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a35050565b600054600160a060020a031681565b600054600160a060020a031633146107ab576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610b55833981519152604482015290519081900360640190fd5b600160a060020a03821660009081526001602052604090205460ff16151561081d576040805160e560020a62461bcd02815260206004820152601560248201527f5441524745545f4e4f545f415554484f52495a45440000000000000000000000604482015290519081900360640190fd5b6002548110610876576040805160e560020a62461bcd02815260206004820152601360248201527f494e4445585f4f55545f4f465f424f554e445300000000000000000000000000604482015290519081900360640190fd5b81600160a060020a031660028281548110151561088f57fe5b600091825260209091200154600160a060020a0316146108f9576040805160e560020a62461bcd02815260206004820152601b60248201527f415554484f52495a45445f414444524553535f4d49534d415443480000000000604482015290519081900360640190fd5b600160a060020a0382166000908152600160205260409020805460ff1916905560028054600019810190811061092b57fe5b60009182526020909120015460028054600160a060020a03909216918390811061095157fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560028054600019019061099a9082610b0d565b506040513390600160a060020a038416907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a35050565b604080517f455243373231546f6b656e28616464726573732c75696e7432353629000000008152905190819003601c0190205b90565b60016020526000908152604090205460ff1681565b60606002805480602002602001604051908101604052809291908181526020018280548015610a7857602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610a5a575b5050505050905090565b600054600160a060020a03163314610ad2576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610b55833981519152604482015290519081900360640190fd5b600160a060020a03811615610b0a576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b815481835581811115610b3157600083815260209020610b31918101908301610b36565b505050565b610a0891905b80821115610b505760008155600101610b3c565b509056004f4e4c595f434f4e54524143545f4f574e455200000000000000000000000000a165627a7a72305820596a9718a2b934a26cb3d20ccf0c0bda112b2d0311d00f2b3a0171041b79b8cb0029",
  "deployedBytecode": "0x6080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166342f1181e8114610229578063494503d41461024c57806370712939146102805780638da5cb5b146102a15780639ad26744146102b6578063ae25532e146102da578063b918161114610321578063d39de6e914610356578063f2fde38b146103bb575b3480156100a457600080fd5b507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19600035167fa85e59e4000000000000000000000000000000000000000000000000000000008114156102245760408051338152600160208201529081205415156101485760e560020a62461bcd0260005260e560020a6020527c1553454e4445525f4e4f545f415554484f52495a454400000000000000604052600060605260646000fd5b600160643503156101945760e560020a62461bcd0260005260e560020a6020527c0e494e56414c49445f414d4f554e540000000000000000000000000000604052600060605260646000fd5b7f23b872dd000000000000000000000000000000000000000000000000000000006000526040602460043760043560206048820160443760288101356000806064600080855af180156101e357005b60e560020a62461bcd0260005260e560020a6020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b600080fd5b34801561023557600080fd5b5061024a600160a060020a03600435166103dc565b005b34801561025857600080fd5b50610264600435610538565b60408051600160a060020a039092168252519081900360200190f35b34801561028c57600080fd5b5061024a600160a060020a0360043516610560565b3480156102ad57600080fd5b5061026461074c565b3480156102c257600080fd5b5061024a600160a060020a036004351660243561075b565b3480156102e657600080fd5b506102ef6109d5565b604080517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff199092168252519081900360200190f35b34801561032d57600080fd5b50610342600160a060020a0360043516610a0b565b604080519115158252519081900360200190f35b34801561036257600080fd5b5061036b610a20565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103a757818101518382015260200161038f565b505050509050019250505060405180910390f35b3480156103c757600080fd5b5061024a600160a060020a0360043516610a82565b600054600160a060020a0316331461042c576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610b55833981519152604482015290519081900360640190fd5b600160a060020a03811660009081526001602052604090205460ff161561049d576040805160e560020a62461bcd02815260206004820152601960248201527f5441524745545f414c52454144595f415554484f52495a454400000000000000604482015290519081900360640190fd5b600160a060020a0381166000818152600160208190526040808320805460ff19168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909101805473ffffffffffffffffffffffffffffffffffffffff191684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b600280548290811061054657fe5b600091825260209091200154600160a060020a0316905081565b60008054600160a060020a031633146105b1576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610b55833981519152604482015290519081900360640190fd5b600160a060020a03821660009081526001602052604090205460ff161515610623576040805160e560020a62461bcd02815260206004820152601560248201527f5441524745545f4e4f545f415554484f52495a45440000000000000000000000604482015290519081900360640190fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b6002548110156107125781600160a060020a031660028281548110151561066857fe5b600091825260209091200154600160a060020a0316141561070a5760028054600019810190811061069557fe5b60009182526020909120015460028054600160a060020a0390921691839081106106bb57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556002805460001901906107049082610b0d565b50610712565b600101610645565b6040513390600160a060020a038416907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a35050565b600054600160a060020a031681565b600054600160a060020a031633146107ab576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610b55833981519152604482015290519081900360640190fd5b600160a060020a03821660009081526001602052604090205460ff16151561081d576040805160e560020a62461bcd02815260206004820152601560248201527f5441524745545f4e4f545f415554484f52495a45440000000000000000000000604482015290519081900360640190fd5b6002548110610876576040805160e560020a62461bcd02815260206004820152601360248201527f494e4445585f4f55545f4f465f424f554e445300000000000000000000000000604482015290519081900360640190fd5b81600160a060020a031660028281548110151561088f57fe5b600091825260209091200154600160a060020a0316146108f9576040805160e560020a62461bcd02815260206004820152601b60248201527f415554484f52495a45445f414444524553535f4d49534d415443480000000000604482015290519081900360640190fd5b600160a060020a0382166000908152600160205260409020805460ff1916905560028054600019810190811061092b57fe5b60009182526020909120015460028054600160a060020a03909216918390811061095157fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560028054600019019061099a9082610b0d565b506040513390600160a060020a038416907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a35050565b604080517f455243373231546f6b656e28616464726573732c75696e7432353629000000008152905190819003601c0190205b90565b60016020526000908152604090205460ff1681565b60606002805480602002602001604051908101604052809291908181526020018280548015610a7857602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610a5a575b5050505050905090565b600054600160a060020a03163314610ad2576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610b55833981519152604482015290519081900360640190fd5b600160a060020a03811615610b0a576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b815481835581811115610b3157600083815260209020610b31918101908301610b36565b505050565b610a0891905b80821115610b505760008155600101610b3c565b509056004f4e4c595f434f4e54524143545f4f574e455200000000000000000000000000a165627a7a72305820596a9718a2b934a26cb3d20ccf0c0bda112b2d0311d00f2b3a0171041b79b8cb0029",
  "sourceMap": "641:7861:19:-;;;162:5:59;:18;;-1:-1:-1;;;;;;162:18:59;170:10;162:18;;;641:7861:19;;;;;;",
  "deployedSourceMap": "641:7861:19:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;641:7861:19;-1:-1:-1;;1033:1:19;1020:15;1016:88;1499:66;1489:8;1486:80;1483:2;;;1795;1789:9;;1833:6;1815:70;;1925:15;1920:2;1909:14;;1902:39;2036:20;;;2030:27;2023:35;2020:2;;;-1:-1:-1;;;;;2156:1:19;2149:77;-1:-1:-1;;;2254:2:19;2247:78;2357:66;2353:2;2346:78;2456:1;2452:2;2445:13;2489:3;2486:1;2479:14;2020:2;5829:1;5823:3;5810:17;5806:25;5803:2;;;-1:-1:-1;;;;;5922:1:19;5915:77;-1:-1:-1;;;6020:2:19;6013:78;6123:66;6119:2;6112:78;6222:1;6218:2;6211:13;6255:3;6252:1;6245:14;5803:2;6553:66;6550:1;6543:77;6848:2;6844;6841:1;6828:23;6988:1;6975:15;7050:2;7045;7028:15;7024:24;7020:2;7007:46;7195:2;7178:15;7174:24;7161:38;7620:1;7560;7505:3;7440:1;7382;7312:5;7257:3;7231:448;7699:7;7696:2;;;7729:12;7696:2;-1:-1:-1;;;;;7858:1:19;7851:77;-1:-1:-1;;;7952:2:19;7945:78;8051:66;8047:2;8040:78;8146:1;8142:2;8135:13;8175:3;8172:1;8165:14;1483:2;8271:1;8268;8261:12;1145:320:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1145:320:20;-1:-1:-1;;;;;1145:320:20;;;;;;;1030:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1030:28:20;;;;;;;;;-1:-1:-1;;;;;1030:28:20;;;;;;;;;;;;;;1579:547;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1579:547:20;-1:-1:-1;;;;;1579:547:20;;;;;91:20:59;;8:9:-1;5:2;;;30:1;27;20:12;5:2;91:20:59;;;;2299:643:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2299:643:20;-1:-1:-1;;;;;2299:643:20;;;;;;;8387:113:19;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8387:113:19;;;;;;;;-1:-1:-1;;8387:113:19;;;;;;;;;;;;;;981:43:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;981:43:20;-1:-1:-1;;;;;981:43:20;;;;;;;;;;;;;;;;;;;;;;;3039:138;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3039:138:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3039:138:20;;;;;;;;;;;;;;;;;333:167:59;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;333:167:59;-1:-1:-1;;;;;333:167:59;;;;;1145:320:20;259:5:59;;-1:-1:-1;;;;;259:5:59;245:10;:19;224:85;;;;;-1:-1:-1;;;;;224:85:59;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;224:85:59;;;;;;;;;;;;;;;-1:-1:-1;;;;;1262:18:20;;;;;;:10;:18;;;;;;;;1261:19;1240:91;;;;;-1:-1:-1;;;;;1240:91:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1342:18:20;;;;;;1363:4;1342:18;;;;;;;;:25;;-1:-1:-1;;1342:25:20;;;;;1377:11;27:10:-1;;23:18;;;45:23;;1377:24:20;;;;;;;;-1:-1:-1;;1377:24:20;;;;;1416:42;1447:10;;1342:18;1416:42;;;1145:320;:::o;1030:28::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1030:28:20;;-1:-1:-1;1030:28:20;:::o;1579:547::-;1814:9;259:5:59;;-1:-1:-1;;;;;259:5:59;245:10;:19;224:85;;;;;-1:-1:-1;;;;;224:85:59;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;224:85:59;;;;;;;;;;;;;;;-1:-1:-1;;;;;1698:18:20;;;;;;:10;:18;;;;;;;;1677:86;;;;;;;-1:-1:-1;;;;;1677:86:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1781:18:20;;;;;;:10;:18;;;;;1774:25;;-1:-1:-1;;1774:25:20;;;1809:252;1833:11;:18;1829:22;;1809:252;;;1894:6;-1:-1:-1;;;;;1876:24:20;:11;1888:1;1876:14;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1876:14:20;:24;1872:179;;;1937:11;1949:18;;-1:-1:-1;;1949:22:20;;;1937:35;;;;;;;;;;;;;;;;1920:11;:14;;-1:-1:-1;;;;;1937:35:20;;;;1932:1;;1920:14;;;;;;;;;;;;;;;:52;;-1:-1:-1;;1920:52:20;-1:-1:-1;;;;;1920:52:20;;;;;;;;;;1990:11;:23;;-1:-1:-1;;1990:23:20;;;;;;:::i;:::-;;2031:5;;1872:179;1853:3;;1809:252;;;2075:44;;2108:10;;-1:-1:-1;;;;;2075:44:20;;;;;;;;1579:547;;:::o;91:20:59:-;;;-1:-1:-1;;;;;91:20:59;;:::o;2299:643:20:-;259:5:59;;-1:-1:-1;;;;;259:5:59;245:10;:19;224:85;;;;;-1:-1:-1;;;;;224:85:59;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;224:85:59;;;;;;;;;;;;;;;-1:-1:-1;;;;;2462:18:20;;;;;;:10;:18;;;;;;;;2441:86;;;;;;;-1:-1:-1;;;;;2441:86:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;2566:11;:18;2558:26;;2537:92;;;;;-1:-1:-1;;;;;2537:92:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;2682:6;-1:-1:-1;;;;;2660:28:20;:11;2672:5;2660:18;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2660:18:20;:28;2639:102;;;;;-1:-1:-1;;;;;2639:102:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2759:18:20;;;;;;:10;:18;;;;;2752:25;;-1:-1:-1;;2752:25:20;;;2808:11;2820:18;;-1:-1:-1;;2820:22:20;;;2808:35;;;;;;;;;;;;;;;;2787:11;:18;;-1:-1:-1;;;;;2808:35:20;;;;2799:5;;2787:18;;;;;;;;;;;;;;;:56;;-1:-1:-1;;2787:56:20;-1:-1:-1;;;;;2787:56:20;;;;;;;;;;2853:11;:23;;-1:-1:-1;;2853:23:20;;;;;;:::i;:::-;-1:-1:-1;2891:44:20;;2924:10;;-1:-1:-1;;;;;2891:44:20;;;;;;;;2299:643;;:::o;8387:113:19:-;761:41;;;;;;;;;;;;;;;;8387:113;;:::o;981:43:20:-;;;;;;;;;;;;;;;:::o;3039:138::-;3120:9;3159:11;3152:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3152:18:20;;;;;;;;;;;;;;;;;;;;;;;3039:138;:::o;333:167:59:-;259:5;;-1:-1:-1;;;;;259:5:59;245:10;:19;224:85;;;;;-1:-1:-1;;;;;224:85:59;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;224:85:59;;;;;;;;;;;;;;;-1:-1:-1;;;;;429:22:59;;;425:69;;467:5;:16;;-1:-1:-1;;467:16:59;-1:-1:-1;;;;;467:16:59;;;;;425:69;333:167;:::o;641:7861:19:-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;",
  "source": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"./MixinAuthorizable.sol\";\n\n\ncontract ERC721Proxy is\n    MixinAuthorizable\n{\n    // Id of this proxy.\n    bytes4 constant internal PROXY_ID = bytes4(keccak256(\"ERC721Token(address,uint256)\"));\n\n    // solhint-disable-next-line payable-fallback\n    function () \n        external\n    {\n        assembly {\n            // The first 4 bytes of calldata holds the function selector\n            let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n            // `transferFrom` will be called with the following parameters:\n            // assetData Encoded byte array.\n            // from Address to transfer asset from.\n            // to Address to transfer asset to.\n            // amount Amount of asset to transfer.\n            // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n            if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000) {\n\n                // To lookup a value in a mapping, we load from the storage location keccak256(k, p),\n                // where k is the key left padded to 32 bytes and p is the storage slot\n                let start := mload(64)\n                mstore(start, and(caller, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(start, 32), authorized_slot)\n\n                // Revert if authorized[msg.sender] == false\n                if iszero(sload(keccak256(start, 64))) {\n                    // Revert with `Error(\"SENDER_NOT_AUTHORIZED\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                // `transferFrom`.\n                // The function is marked `external`, so no abi decodeding is done for\n                // us. Instead, we expect the `calldata` memory to contain the\n                // following:\n                //\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 4 * 32  | function parameters:                |\n                // |          | 4      |         |   1. offset to assetData (*)        |\n                // |          | 36     |         |   2. from                           |\n                // |          | 68     |         |   3. to                             |\n                // |          | 100    |         |   4. amount                         |\n                // | Data     |        |         | assetData:                          |\n                // |          | 132    | 32      | assetData Length                    |\n                // |          | 164    | **      | assetData Contents                  |\n                //\n                // (*): offset is computed from start of function parameters, so offset\n                //      by an additional 4 bytes in the calldata.\n                //\n                // (**): see table below to compute length of assetData Contents\n                //\n                // WARNING: The ABIv2 specification allows additional padding between\n                //          the Params and Data section. This will result in a larger\n                //          offset to assetData.\n\n                // Asset data itself is encoded as follows:\n                //\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 2 * 32  | function parameters:                |\n                // |          | 4      | 12 + 20 |   1. token address                  |\n                // |          | 36     |         |   2. tokenId                        |\n                \n                // We construct calldata for the `token.transferFrom` ABI.\n                // The layout of this calldata is in the table below.\n                // \n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 3 * 32  | function parameters:                |\n                // |          | 4      |         |   1. from                           |\n                // |          | 36     |         |   2. to                             |\n                // |          | 68     |         |   3. tokenId                        |\n\n                // There exists only 1 of each token.\n                // require(amount == 1, \"INVALID_AMOUNT\")\n                if sub(calldataload(100), 1) {\n                    // Revert with `Error(\"INVALID_AMOUNT\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000000e494e56414c49445f414d4f554e540000000000000000000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                /////// Setup Header Area ///////\n                // This area holds the 4-byte `transferFrom` selector.\n                // Any trailing data in transferFromSelector will be\n                // overwritten in the next `mstore` call.\n                mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n                \n                /////// Setup Params Area ///////\n                // We copy the fields `from` and `to` in bulk\n                // from our own calldata to the new calldata.\n                calldatacopy(4, 36, 64)\n\n                // Copy `tokenId` field from our own calldata to the new calldata.\n                let assetDataOffset := calldataload(4)\n                calldatacopy(68, add(assetDataOffset, 72), 32)\n\n                /////// Call `token.transferFrom` using the calldata ///////\n                let token := calldataload(add(assetDataOffset, 40))\n                let success := call(\n                    gas,            // forward all gas\n                    token,          // call address of token contract\n                    0,              // don't send any ETH\n                    0,              // pointer to start of input\n                    100,            // length of input\n                    0,              // write output to null\n                    0               // output size is 0 bytes\n                )\n                if success {\n                    return(0, 0)\n                }\n                \n                // Revert with `Error(\"TRANSFER_FAILED\")`\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n                mstore(96, 0)\n                revert(0, 100)\n            }\n\n            // Revert if undefined function is called\n            revert(0, 0)\n        }\n    }\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4)\n    {\n        return PROXY_ID;\n    }\n}\n",
  "sourcePath": "/Users/charlescrain/dev/pixura-contracts/truffle/node_modules/0x-monorepo/packages/contracts/contracts/protocol/AssetProxy/ERC721Proxy.sol",
  "ast": {
    "absolutePath": "/Users/charlescrain/dev/pixura-contracts/truffle/node_modules/0x-monorepo/packages/contracts/contracts/protocol/AssetProxy/ERC721Proxy.sol",
    "exportedSymbols": {
      "ERC721Proxy": [
        1943
      ]
    },
    "id": 1944,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1919,
        "literals": [
          "solidity",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "580:23:19"
      },
      {
        "absolutePath": "/Users/charlescrain/dev/pixura-contracts/truffle/node_modules/0x-monorepo/packages/contracts/contracts/protocol/AssetProxy/MixinAuthorizable.sol",
        "file": "./MixinAuthorizable.sol",
        "id": 1920,
        "nodeType": "ImportDirective",
        "scope": 1944,
        "sourceUnit": 2141,
        "src": "605:33:19",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1921,
              "name": "MixinAuthorizable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2140,
              "src": "669:17:19",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MixinAuthorizable_$2140",
                "typeString": "contract MixinAuthorizable"
              }
            },
            "id": 1922,
            "nodeType": "InheritanceSpecifier",
            "src": "669:17:19"
          }
        ],
        "contractDependencies": [
          2140,
          2191,
          2216,
          7078,
          7126
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1943,
        "linearizedBaseContracts": [
          1943,
          2140,
          2216,
          2191,
          7126,
          7078
        ],
        "name": "ERC721Proxy",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 1929,
            "name": "PROXY_ID",
            "nodeType": "VariableDeclaration",
            "scope": 1943,
            "src": "718:85:19",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 1923,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "718:6:19",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "arguments": [
                    {
                      "argumentTypes": null,
                      "hexValue": "455243373231546f6b656e28616464726573732c75696e7432353629",
                      "id": 1926,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "771:30:19",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_0257179262a09e2dc7b2d43c61f09a5cf1b0c137c8ac216cbe0a97d744c479ed",
                        "typeString": "literal_string \"ERC721Token(address,uint256)\""
                      },
                      "value": "ERC721Token(address,uint256)"
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_stringliteral_0257179262a09e2dc7b2d43c61f09a5cf1b0c137c8ac216cbe0a97d744c479ed",
                        "typeString": "literal_string \"ERC721Token(address,uint256)\""
                      }
                    ],
                    "id": 1925,
                    "name": "keccak256",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 8418,
                    "src": "761:9:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                      "typeString": "function () pure returns (bytes32)"
                    }
                  },
                  "id": 1927,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "761:41:19",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                ],
                "id": 1924,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "754:6:19",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes4_$",
                  "typeString": "type(bytes4)"
                },
                "typeName": "bytes4"
              },
              "id": 1928,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "754:49:19",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1933,
              "nodeType": "Block",
              "src": "894:7395:19",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "authorized_slot": {
                        "declaration": 1967,
                        "isOffset": false,
                        "isSlot": true,
                        "src": "1925:15:19",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 1932,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000)\n    {\n        let start := mload(64)\n        mstore(start, and(caller(), 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(start, 32), authorized_slot)\n        if iszero(sload(keccak256(start, 64)))\n        {\n            mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n            mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n            mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000)\n            mstore(96, 0)\n            revert(0, 100)\n        }\n        if sub(calldataload(100), 1)\n        {\n            mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n            mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n            mstore(64, 0x0000000e494e56414c49445f414d4f554e540000000000000000000000000000)\n            mstore(96, 0)\n            revert(0, 100)\n        }\n        mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n        calldatacopy(4, 36, 64)\n        let assetDataOffset := calldataload(4)\n        calldatacopy(68, add(assetDataOffset, 72), 32)\n        let token := calldataload(add(assetDataOffset, 40))\n        let success := call(gas(), token, 0, 0, 100, 0, 0)\n        if success\n        {\n            return(0, 0)\n        }\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n        mstore(96, 0)\n        revert(0, 100)\n    }\n    revert(0, 0)\n}",
                  "src": "904:7385:19"
                }
              ]
            },
            "documentation": null,
            "id": 1934,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1930,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "869:2:19"
            },
            "payable": false,
            "returnParameters": {
              "id": 1931,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "894:0:19"
            },
            "scope": 1943,
            "src": "860:7429:19",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1941,
              "nodeType": "Block",
              "src": "8468:32:19",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1939,
                    "name": "PROXY_ID",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1929,
                    "src": "8485:8:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "functionReturnParameters": 1938,
                  "id": 1940,
                  "nodeType": "Return",
                  "src": "8478:15:19"
                }
              ]
            },
            "documentation": "@dev Gets the proxy id associated with the proxy address.\n @return Proxy id.",
            "id": 1942,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "getProxyId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1935,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8406:2:19"
            },
            "payable": false,
            "returnParameters": {
              "id": 1938,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1937,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1942,
                  "src": "8456:6:19",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 1936,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "8456:6:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8455:8:19"
            },
            "scope": 1943,
            "src": "8387:113:19",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1944,
        "src": "641:7861:19"
      }
    ],
    "src": "580:7923:19"
  },
  "legacyAST": {
    "absolutePath": "/Users/charlescrain/dev/pixura-contracts/truffle/node_modules/0x-monorepo/packages/contracts/contracts/protocol/AssetProxy/ERC721Proxy.sol",
    "exportedSymbols": {
      "ERC721Proxy": [
        1943
      ]
    },
    "id": 1944,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1919,
        "literals": [
          "solidity",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "580:23:19"
      },
      {
        "absolutePath": "/Users/charlescrain/dev/pixura-contracts/truffle/node_modules/0x-monorepo/packages/contracts/contracts/protocol/AssetProxy/MixinAuthorizable.sol",
        "file": "./MixinAuthorizable.sol",
        "id": 1920,
        "nodeType": "ImportDirective",
        "scope": 1944,
        "sourceUnit": 2141,
        "src": "605:33:19",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1921,
              "name": "MixinAuthorizable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2140,
              "src": "669:17:19",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MixinAuthorizable_$2140",
                "typeString": "contract MixinAuthorizable"
              }
            },
            "id": 1922,
            "nodeType": "InheritanceSpecifier",
            "src": "669:17:19"
          }
        ],
        "contractDependencies": [
          2140,
          2191,
          2216,
          7078,
          7126
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1943,
        "linearizedBaseContracts": [
          1943,
          2140,
          2216,
          2191,
          7126,
          7078
        ],
        "name": "ERC721Proxy",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 1929,
            "name": "PROXY_ID",
            "nodeType": "VariableDeclaration",
            "scope": 1943,
            "src": "718:85:19",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 1923,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "718:6:19",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "arguments": [
                    {
                      "argumentTypes": null,
                      "hexValue": "455243373231546f6b656e28616464726573732c75696e7432353629",
                      "id": 1926,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "771:30:19",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_0257179262a09e2dc7b2d43c61f09a5cf1b0c137c8ac216cbe0a97d744c479ed",
                        "typeString": "literal_string \"ERC721Token(address,uint256)\""
                      },
                      "value": "ERC721Token(address,uint256)"
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_stringliteral_0257179262a09e2dc7b2d43c61f09a5cf1b0c137c8ac216cbe0a97d744c479ed",
                        "typeString": "literal_string \"ERC721Token(address,uint256)\""
                      }
                    ],
                    "id": 1925,
                    "name": "keccak256",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 8418,
                    "src": "761:9:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                      "typeString": "function () pure returns (bytes32)"
                    }
                  },
                  "id": 1927,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "761:41:19",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                ],
                "id": 1924,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "754:6:19",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes4_$",
                  "typeString": "type(bytes4)"
                },
                "typeName": "bytes4"
              },
              "id": 1928,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "754:49:19",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1933,
              "nodeType": "Block",
              "src": "894:7395:19",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "authorized_slot": {
                        "declaration": 1967,
                        "isOffset": false,
                        "isSlot": true,
                        "src": "1925:15:19",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 1932,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000)\n    {\n        let start := mload(64)\n        mstore(start, and(caller(), 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(start, 32), authorized_slot)\n        if iszero(sload(keccak256(start, 64)))\n        {\n            mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n            mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n            mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000)\n            mstore(96, 0)\n            revert(0, 100)\n        }\n        if sub(calldataload(100), 1)\n        {\n            mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n            mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n            mstore(64, 0x0000000e494e56414c49445f414d4f554e540000000000000000000000000000)\n            mstore(96, 0)\n            revert(0, 100)\n        }\n        mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n        calldatacopy(4, 36, 64)\n        let assetDataOffset := calldataload(4)\n        calldatacopy(68, add(assetDataOffset, 72), 32)\n        let token := calldataload(add(assetDataOffset, 40))\n        let success := call(gas(), token, 0, 0, 100, 0, 0)\n        if success\n        {\n            return(0, 0)\n        }\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n        mstore(96, 0)\n        revert(0, 100)\n    }\n    revert(0, 0)\n}",
                  "src": "904:7385:19"
                }
              ]
            },
            "documentation": null,
            "id": 1934,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1930,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "869:2:19"
            },
            "payable": false,
            "returnParameters": {
              "id": 1931,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "894:0:19"
            },
            "scope": 1943,
            "src": "860:7429:19",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1941,
              "nodeType": "Block",
              "src": "8468:32:19",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1939,
                    "name": "PROXY_ID",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1929,
                    "src": "8485:8:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "functionReturnParameters": 1938,
                  "id": 1940,
                  "nodeType": "Return",
                  "src": "8478:15:19"
                }
              ]
            },
            "documentation": "@dev Gets the proxy id associated with the proxy address.\n @return Proxy id.",
            "id": 1942,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "getProxyId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1935,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8406:2:19"
            },
            "payable": false,
            "returnParameters": {
              "id": 1938,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1937,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1942,
                  "src": "8456:6:19",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 1936,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "8456:6:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8455:8:19"
            },
            "scope": 1943,
            "src": "8387:113:19",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1944,
        "src": "641:7861:19"
      }
    ],
    "src": "580:7923:19"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2019-07-08T22:27:04.557Z"
}